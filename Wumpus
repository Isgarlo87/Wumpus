"""
Dev Name: Ismael Garcia
Desc: Hunt the Wumpus game
C_Date: 15/02/20
M_Date: 16/02/20
"""

import random
 
class WumpusGame(object):
 
 
	def __init__(self, edges=[]):
 
		# Crea mapa en función de esquinas.
		if edges:
			cave = {}
			N = max([edges[i][0] for i in range(len(edges))])
			for i in range(N):
				exits = [edge[1] for edge in edges if edge[0] == i]
				cave[i] = exits
 
		# Modo estándar: Dodecaedro.
		else:
			cave = {1: [2,3,4], 2: [1,5,6], 3: [1,7,8], 4: [1,9,10], 5:[2,9,11],
				6: [2,7,12], 7: [3,6,13], 8: [3,10,14], 9: [4,5,15], 10: [4,8,16], 
				11: [5,12,17], 12: [6,11,18], 13: [7,14,18], 14: [8,13,19], 
				15: [9,16,17], 16: [10,15,19], 17: [11,20,15], 18: [12,13,20], 
				19: [14,16,20], 20: [17,18,19]}
 
		self.cave = cave
 
		self.threats = {}
 
		self.arrows = 5
 
		self.arrow_travel_distance = 5		# Según juego original. 
							
		self.player_pos = -1
 
 
	"""
	HELPER
	"""
 
 	#Lista de habitaciones que no tienen amenaza
	
	def get_safe_rooms(self):	
		return list(set(self.cave.keys()).difference(self.threats.keys()))
 

	#Genera aletoriamente ubicación de amenazas y jugador.

	def populate_cave(self):
		for threat in ['bat', 'bat', 'pit', 'pit', 'wumpus']:
			pos = random.choice(self.get_safe_rooms())
			self.threats[pos] = threat
		self.player_pos = random.choice(self.get_safe_rooms())
 
 
	def breadth_first_search(self, source, target, max_depth=5):

		# Valores iniciales.
		graph = self.cave
		depth = 0
 
		def search(stack, visited, target, depth):
			if stack == []:				
				return False, -1
			if target in stack:
				return True, depth
			visited = visited + stack
			stack = list(set([graph[v][i] for v in stack for i in range(len(graph[v]))]).difference(visited))
			depth += 1
			if depth > max_depth:			
				return False, depth
			else:					
				return search(stack, visited, target, depth)
 
		return search([source], [], target, depth)
 
 
	"""
	INPUT / OUTPUT
	"""
 

	#Muestra amenazas de habitaciones adyacentes.

	def print_warning(self, threat):
	
		if threat == 'bat':
			print("Escuchas un chirrido cerca...")
		elif threat == 'pit':
			print("Sientes un viento gélido cerca...")
		elif threat == 'wumpus':
			print("Algo huele realmente mal cerca...")
 

	#Espera input de datos.

	def get_players_input(self):
	
		while 1:						# Acción.
 
			inpt = input("Disparar o Mover (D/M)? ")
			try:						# El jugador elige (disparo o movimiento)
				mode = str(inpt).lower()
				assert mode in ['d', 'm', 'q']
				break
			except (ValueError, AssertionError):
				print("Acción no válida: escoge 'S' para disparar o 'M' para moverte.")
 
		if mode == 'q':						# q Termina el juego.
			return 'q', 0
 
		while 1:						
 
			inpt = input("¿Por donde? ")
			try:						
				target = int(inpt)
			except ValueError:
				print("No es un número real..")
				continue				
 
			if mode == 'm':
				try:					
					assert target in self.cave[self.player_pos]
					break
				except AssertionError:
					print("No puedes ir mas allá. Por favor usa uno de los tuneles.")
 
			elif mode == 'd':
				try:						
					bfs = self.breadth_first_search(self.player_pos, target)
					assert bfs[0] == True
					break
				except AssertionError:
					if bfs[1] == -1: 			
						print("No existen habitaciones con ese número en la cueva. Tu flecha viajará de forma erratica.")
						target = random.choice(self.cave.keys())
					if bfs[1] > self.arrow_travel_distance:				
						print("La flecha no tiene tanto alcance..")
 
		return mode, target
  
	"""
	Lógica del juego
	"""
  
	def enter_room(self, room_number):
		""" Control acceso a habitación.
		"""	
		
		print("Entrando en habitación {}...".format(room_number))
		
		# Probabilidad de amenaza al entrar en habitación nueva.	
		if self.threats.get(room_number) == 'bat':
		
			# Murcielago teletransporta a jugador a habitación vacia
			print("Te has topado con un murcielago, este te ha transortado a una habitación aleatoria abandonada.")
			new_pos = random.choice(self.get_safe_rooms())
			return self.enter_room(new_pos)
			
		elif self.threats.get(room_number) == 'wumpus':
			print("Wumpus te ha comido.")
			return -1
			
		elif self.threats.get(room_number) == 'pit':
			print("Te has caido por un pozo.")
			return -1
 
		# The room is safe; collect information about adjacent rooms.
		for i in self.cave[room_number]:
			self.print_warning(self.threats.get(i))
 
		# Only if nothing else happens, the player enters the room of his choice.
		return room_number
 
 
	def shoot_room(self, room_number):
	
		""" Control proceso de disparos en habitación.
		"""
		
		print("Disparas una flecha a la habitación {}...".format(room_number))
		
		# Dispara una flecha y comprueba si ha acertado.
		
		self.arrows -= 1
		threat = self.threats.get(room_number)
		if threat in ['bat', 'wumpus']:
			del self.threats[room_number]		
			if threat == 'wumpus':
				print("Hurra, has matado al Wumpus!")
				return -1
			elif threat == 'bat':
				print("Has matado un murcielago.")
		elif threat in ['pit', None]:
			print("Se ha perdido la fecha.")
 
		# Si disparas tu última flecha sin matar a Wumpus...
		if self.arrows < 1:		
			print("Te has quedado sin munición.")
			return -1
 
		#  Si disparas a otra habitación, Wumpus tiene un 75% de probabilidad de despertarse y moverse a una habitación adyacente.
		if random.random() < 0.75:
			#print("DEBUG: Wumpus moved.")
			for room_number, threat in self.threats.items():
				if threat == 'wumpus':
					wumpus_pos = room_number					
			new_pos = random.choice(list(set(self.cave[wumpus_pos]).difference(self.threats.keys())))
			del self.threats[room_number]
			self.threats[new_pos] = 'wumpus'			
			if new_pos == self.player_pos: 			# Wumpus entra en la habitación del jugador.
				print("Wumpus entra en tu habitación y te come")
				return -1
 
		return self.player_pos
 
 
	def gameloop(self):
 
		print("CAZA A WUMPUS")
		print("===============")
		print()
		self.populate_cave()
		self.enter_room(self.player_pos)
 
		while 1:
 
			#print("DEBUG: Tu carcaj contiene {} flechas.".format(self.arrows))			
			#print("DEBUG: Las habitaciones seguras son: {}.".format(self.get_safe_rooms()))			
			#print("DEBUG: Las amenazas están en las habitaciones: {}".format(self.threats))
 
			print("Estás en la habitación {}.\n".format(self.player_pos), end=" ")
			print("\nPuedes ir a las habitaciones:  {0}  {1}  {2}".format(*self.cave[self.player_pos]))
 
 
			inpt = self.get_players_input()		# El jugador elige moverse o disparar.
			print()					# Separador entre mensajes.
			if inpt[0] == 'm':				# Moverse.
				target = inpt[1] 
				self.player_pos = self.enter_room(target)
			elif inpt[0] == 'd':				# Disparar.
				target = inpt[1]
				self.player_pos = self.shoot_room(target)
			elif inpt[0] == 'q':				# Salir del juego.
				self.player_pos = -1
 
			if self.player_pos == -1:			# -1 Equivale a muerte del jugador o salir del juego.
				break					
									 
 
		print()
		print("Fin del juego!")	
 
 
if __name__ == '__main__':						
 
	WG = WumpusGame()
	WG.gameloop()
